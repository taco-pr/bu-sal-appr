
close all;
clear all;


addpath('/home/robert/uni/matlabfns/NaN');
addpath('/home/robert/uni/taco/data/new');
addpath('/home/robert/uni/taco/svn.taco-project.eu/WP04/Software/SourceCode/Drafts/Libraries/matlab/NetCDF');


%figOrigRange = figure;
figOrigColor = figure;
figSaliency = figure;
subplotNM = [2 3];


%% configure saliency
p{1} = default_pami_param;
p{1}.mapWidth = 2;
p{1}.levels = [2 3 4];
p{1}.surroundSig = [2 8];
p{1}.channels = 'O';
p{1}.subtractMin = 1;
p{1}.useNormWeights = 0;
p{1}.nGaborAngles = 8;
p{1}.JumpEdgesThres = [0.8 0.9];
p{1}.RoofEdgesThres = [0.8 0.9];

% p{2} = p{1};
% p{2}.channels = 'R';
% 
% p{3} = p{1};
% p{3}.channels = 'S';
% 
% p{4} = p{1};
% p{4}.channels = 'T';
% 
% p{5} = p{1};
% p{5}.channels = 'U';
% 
% p{6} = p{1};
% p{6}.channels = 'V';

for nframe = 20:2:50

    getImageWithRangeFromCDF
    %% READ DATA
    % KINECT
    %r = readCDF('kinect_with_RGB.cdf',nframe,1);
    %img = r.data(:,:,4:6)/255;

    % LASER
    r = readCDF('seq_003.cdf',nframe,1);
    img = repmat(r.data(:,:,4)/max(max(r.data(:,:,4))),[1 1 3]);

    img_range = sqrt(r.data(:,:,1).^2 + r.data(:,:,2).^2 + r.data(:,:,3).^2);
    img_xyz = r.data(:,:,1:3);

    % remove every 'st'-th row
    st = 1;
    img_range = img_range(1:st:end,:,:);
    img = img(1:st:end,:,:);
    img_xyz = img_xyz(1:st:end,:,:);

    % remember where no range exists
    NoRangeIndex = isnan(img_range);
    for i=1:numel(p)
        p{i}.NoRangeIndex = NoRangeIndex;
    end
    
    
    %% KILL NANS AND ZEROS!!!!!!!!
    while true
        nr = isnan(img_range) | (img_range==0);
        if sum(nr)==0 
            break;
        end

        t = nanconv2(img_range,[1 1 1;1 1 1; 1 1 1]/9);
        u1 = nanconv2(img_xyz(:,:,1),[1 1 1;1 1 1; 1 1 1]/9);
        u2 = nanconv2(img_xyz(:,:,2),[1 1 1;1 1 1; 1 1 1]/9);
        u3 = nanconv2(img_xyz(:,:,3),[1 1 1;1 1 1; 1 1 1]/9);
        b=1; % because nancon2 is bigger;
        t=t(1+b:end-b,1+b:end-b);
        img_range(nr) = t(nr);

        u1=u1(1+b:end-b,1+b:end-b);
        u2=u2(1+b:end-b,1+b:end-b);
        u3=u3(1+b:end-b,1+b:end-b);
        img_x = img_xyz(:,:,1);
        img_y = img_xyz(:,:,2);
        img_z = img_xyz(:,:,3); 
        img_x(nr) = u1(nr);
        img_y(nr) = u2(nr);
        img_z(nr) = u3(nr);
        img_xyz(:,:,1) = img_x;
        img_xyz(:,:,2) = img_y;
        img_xyz(:,:,3) = img_z;
        %figure;imshow(img_range,[0 3]);    
    end  


    img(:,:,4) = img_range;
    img(:,:,5:7) = img_xyz;
    figure(figOrigColor);imagesc(img(:,:,1:3));
    %figure(figOrigRange);imagesc(img(:,:,4));colormap(gray);

 
    for nparam = 1:numel(p)
        % calculate saliency
        [map{nparam} chanmaps{nparam} maps{nparam} chans{nparam}]= my_simpsal(img,p{nparam});
    end
    
    figure(figSaliency);clf;
    for nparam = 1:numel(p)
        % plot original image with overlayed saliency
        subplot(subplotNM(1),subplotNM(2),nparam);
        imagesc(img(:,:,1:3));hold on;
        
        if true
            h=imagesc(imresize(map{nparam},[size(img,1) size(img,2)],'nearest'));
            alpha_matrix = 0.9*ones(size(img,1), size(img,2));
            set(h,'AlphaData',alpha_matrix);
        else
            h=imagesc(0*ones(size(img,1), size(img,2)));       
            alpha_matrix = imresize(map{nparam},[size(img,1) size(img,2)],'nearest');
            alpha_matrix(alpha_matrix > 0.5) = 0;
            alpha_matrix(alpha_matrix ~= 0) = 0.8;
            set(h,'AlphaData',alpha_matrix);
        end
        
    end
end